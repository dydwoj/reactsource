<< React >>
    - 개발환경

    1) Node.js 설치 (패키지 관리도구 npm 이 설치됨)
        => 프로젝트마다 패키지 설치 : 터미널창 => npm i 패키지명
            
    - 선택사항 (yarn 설치)
        => 패키지 관리도구 => npm 보다 효율적이고 빠름
        1. npm i --global yarn
        2. yarn --version

        * 패키지 설치 명령어
            yarn add 패키지명
            
            - 설치 패키지
                1. tailwindcss
                    => 실행 코드 : yarn add tailwindcss @tailwindcss/vite
                2. react-icons
                    => 실행 코드 : yarn add react-icons
                3. axios
                    => 실행 코드 : yarn add axios
                4. router
                    => 실행 코드 : yarn add react-router-dom

    2) extension
        1. reactjs code snippets - charalampos karypidis
        2. Tailwind CSS IntelliSense - Tailwind Labs
        3. Material Icon Theme - Philipp Kief (파일 색상 테마)
            
        - 엣지 설치
            addons 검색
                => 마소페이지 addons 들어가기
                => react developer tools 다운로드

    3) 환경설정 (vscode)
        1. emmet 검색
            =>  Include Languages 
                item : javascript
                value : javascriptreact
        2. Default Formatter : Prettier

    4) react 프로그램 생성

        1. npx create-react-app 앱이름  (전통적인 방법)
            => CRA 방식으로 프로그램 생성

        2. vite 환경에서 react 프로그램 생성

        - 생성 명령어 순서
                
            * cd .. 해당 프로그램에서 나오기

            - 선택하면서 하기
                1. yarn create vite
                2. 이름 설정
                3. react
                4. javascript
                5. 순서대로 치기
                    cd begin1
                    => yarn
                    => yarn dev
                        * o : 브라우저 오픈
                        * q : 빠져나오기

            - 한번에 실행하기
                yarn create vite 앱이름 --template react
                    => cd begin1
                    => yarn
                    => yarn dev
        
    5) 프로젝트 구조

        1. package.json : Node 기반 프로젝트는 가지고 있음 == porm.xml 과 같음
            - dependencies : 사용자가 필요한 것
            - devDependencies : 개발자가 필요한 것

        2. eslint.config.js : eslint 환경설정 파일
            => eslint : 자바스크립트 문법 검사
            * config : 환경설정을 파일임을 의미

        3. vite.config.js : vite 환경설정 파일

    - 명령어
        
        1) yarn dev
            => 작성하는 코드 실시간으로 확인하며 페이지 개발하게 하는 명령어
            press r + enter : restart the server
            press u + enter : show server url   
            press o + enter : open in browser
            press c + enter : clear console
            press q + enter : quit

        2) yarn build
            => 개발된 코드들을 하나로 합쳐서 서비스할 수 있는 상태로 만들어 줌
            => dist 폴더 생성 : 배포용 파일
            => src 폴더 안 jsx 파일들을 번들러를 이용해 최적화 작업을 하게 됨
                * 번들러 : 묶어주는 개념

        3) yarn preview
            => 미리보기 (서버에 배포된 후 실행결과 보기)

    < jsx 문법 >
        => 자바스크립트 확장 문법
        => 브라우저에서 실행되기 전에 코드가 번들링 되는 과정에서 바벨을 사용하여 일반 자브스크립트 코드로 변환됨
            * 번들러
                => 여러개의 모듈로 개발한 것들을 묶어서 서비스하게 해줌
                    도구 : 웹팩 => 이외에도 다른 도구들도 있음
            * 바벨 : 자바스크립트 문법으로 변환하게 해줌

        * rsc : 자동 완성 (html : ! 처럼)
        * className : html의 class 와 동일 === class=""
        * maxlength == maxLength
        * readonly == readOnly

        - {} 사용
            => 태그가 여러개가 있을 때는 꼭 묶어줘야 함 => 하나의 태그로 만들어서 보낸다
            => return 안에서 자바스크립트 코드를 사용하고 싶을때도 사용
            => 함수를 사용하고 싶으면 {}(괄호) 안에서 사용해야 함
            => 변수에 하나의 값만 던지는게 아닌 함수 그 자체를 던질 수 있음
                ex) name={()=>()} 로 {} 안에 함수 선언 가능

        - if 문 대신에 조건부 연산자를 많이 사용
            1) 조건 ? 참 : 거짓 : 일반적인 조건부 연산자

            2) 조건 && 참 : 조건부 렌더링 (참인 경우에만 작동)
                => 만약 else 가 필요하지 않는 경우 사용

            3) 값1 ?? 값2 : null or undefined 인 경우 뒤에 오는 값 반환
                => ?? : 비어있는 문자열에는 처리 X

            4) 값1 || 값2 : null or undefined 인 경우 뒤에 오는 값 반환
                => 비어 있는 문자열 처리 O

            * 참 / 거짓
                참 : 0 제외 숫자, '문자', [], {}
                거짓 : 0, '', null, undefined, NaN

        - map (foreach 같은 함수)
            참고 : react/MyComponent
            => 사용시 배열로 나옴
                => 함수를 실행한 결과가 새로운 배열로 리턴
            => key 값을 사용해야 함

            * map(() => {})
                => 결과값에 {} 치는 순간 return 을 사용해야 한다
                but. {} 없으면 return 사용 X

            - 메서드
                1. join() : 배열 사이에 추가할 수 있음
                2. filter() : true/false 값이 나오는 조건을 주면 조건에 맞는 값 출력
        
        - reduce()
            참고 : begin/Average

            - 사용법
                1) reduce((a, b) => a + b)
                    => 배열의 값들을 전부 더해줌

    < CSS >
        참고 : MyStyle

        - 스타일 적용
            1) ~~.css : import 사용
            2) jsx 안에서 스타일 선언
                => 객체 선언 해서 태그 안에 객체명으로 style 선언 가능
            3) 인라인 방식 : 태그 안에 직접 사용
                ex) <div style={{ color: "red", fontSize: "25px" }}>홍길동</div>
            4) CSS module
                => 만드는 법 : 이름.module.css
                => component마다 스타일 클래스명이 중첩되는 것을 방지해 줌
                    => 들여올 때마다 개별적인 임의의 이름을 부여하기 때문에 중첩이 방지가 됨
            5) 디자인 라이브러리 사용
                1. react-bootstrap
                2. tailwindcss => 우리가 사용하는 것

        - 단독태그
            ex) br 등...
            => js 에서는 단독태그 존재 X => 무조건 닫아야 한다

    < component > : 대문자로 생성 (java 처럼)
        참고 : components
        - 예전엔 클래스로 구현
        - 요즘은 함수로 구현
        - 각자 따로 개발하고 하나로 모아서 내보내야 함
            => 내보내는게 중요함!!
        
        * 부모가 값을 자식한테 받는 경우 X !! => 부모의 값을 자식이 받는 경우만 존재

        - 작성
            => 쪼개서 구현 => jsx 라고 부름

        - 공유
            참고 : MyApp, MyButton
            => 공유하려면 부모가 값을 가지고 있어야 함
            => props 개념을 사용

            - 작성
                1. 부모 : 값과 함수를 가지고 있어야 함
                2. import 한 자식에게 값에대한 값을 던짐
                3. 자식 : 값을 받아서 추출
        
    < props >
        참고 : 엣지/f12/components 확인, card, product 확인
        => key=value 형태
        => properties 줄임말
        => 컴포넌트들 사이에서 데이터를 전달시 사용
            but. 부모 -> 자식 에게 데이터를 전달하는 경우 사용
        => 단순히 생각해서 상속의 느낌임
            => 코드의 실행 순서에 따라 위치가 정해짐
        
        - 함수 던지기
            부모 -> 자식한테 key="value" 형태로 던질 수 있음
                ex) 부모 : <자식명 key="value" />
                                => import 하는 구문
                    자식 : const MyComponent = ({ key값, key값 }) => {}
                
                * key / value 형태로 여러개 보낼 수 있음
                    => 그만큼 반복을 함
                * 넘겨주는 모든 값을 자식이 사용해야 하는 것은 아님
                    => 쓰고 싶은 만큼만 사용하면 됨

    < children >
        참고 : CardLayout, ParentCardLayout
        => component 태그 사이의 내용 보여주기
        => 외부에 레이아웃 컴포넌트를 구성한 뒤 내용을 자유롭게 채울 때 사용
            ex) 부모 jsx : <App name="홍길동">
                           <App name="홍길동">내용</App>

    < state >
        참고 : Counter, InputSample, InputMultipleSample
            => 리액트는 가상 DOM 형성
               이벤트 발생시 가상 DOM 에 변화를 줌
               기존 DOM 의 변경된 부분과 가상 DOM 의 값이 달라지면 기존 DOM 제거 후 가상 DOM 을 업데이트
               지금까지의 DOM 은 달라진 부분만 변경 했음 => axios 사용 등...
               리액트는 달라지면 전체를 변화시켜서 처음부터 저장하는 개념
                    => 처리 속도가 일부분만 교체 보다는 새로 전부 업데이트가 빠르다

        - 함수

            * 변수는 값 비교
                ex) const a = 1
                    const b = 1
                    a === b : true
                => 함수는 주소 비교
                    const c = x => x + 1
                    const d = x => x + 1
                    c === d : false

            < 이벤트 >
                => 동적으로 변화시키는 속성
                1) onClick : 클릭시
                2) onChange : 변화시

            < use~~~ > : hook 이라고 부름

                - Rerendering (재렌더링)
                    부모가 렌더링이 되면 자식도 같이 렌더링이 됨
                    but. 자식이 재렌더링이 된다고 부모한테 영향 X (역으로 영향을 주지는 않음)


                - useState() : 새로운 UI 반영
                    => 동적으로 변화하는 변수의 상태를 확인 함
                    => 컨포넌트 내부에서 변경될 수 있는 값으로 값이 변경될 때마다 페이지가 렌더링(rerendering) 됨
                    => useState 가 관리하는 변수가 업데이트 된다면 가상 DOM 을 업데이트 하는 개념
                        => 기존의 다른 변수들은 새로고침이 됨
                    
                    - 사용법
                        => 변수명, 함수명
                            => ex) const [변수명, 함수명] = useState();
                            => ex2) const [count, setCount] = useState(0);
                                => 숫자일시, 0 으로
                                => count 값 변화가 일어나면 웹페이지 리렌더링(== 새로고침)
                            => ex3) const [text, setText] = useState("")
                                => 문자일시, 빈 문자열로
                    
                    - 여러개를 묶어서 사용하기
                        useState({
                            key1: value1
                            key2: value2
                        })
                            =>
                
                - useRef() : useState() 발생시, 리렌더링 될 때 렌더링과 관계없이 useRef() 값을 유지함
                    참고 : begin/CounterRef, InputRef
                    => rerendering 이 되어도 본인이 가지고 있는 값을 그대로 가지고 있음
                        컨포넌트가 특정 정보를 기억해야 할 필요가 있을 때 사용
                        스크롤바 위치, 포커스 설정, 특정 요소의 크기 가져오기 같은 DOM 선택

                    * useRef 값이 변경된다면 변경된 그 값 유지

                    - 기억할 요소 선택
                        const inputText = useRef(null);

                        const handleFocus = (e) => {
                            inputText.current.focus();
                        };
                            => 기억할 요소 선택 : current 를 통해 접근

                        return <input type="text" ref={inputText} />
                            => 기억할 요소에 ref="" 속성 사용
                
                - useEffect() : 마운트 / 업데이트시, 실행
                    참고 : begin1/Life
                    * 의존성 배열
                    => 주로 axios 같이 서버를 이용해야 할 때 사용
                    => 리렌더링이 일어나도 return 값의 변화가 없으면 해당 함수는 실행이 안됨

                    * LifeCycle
                        - 주기
                            * 마운트 -> 업데이트 -> 언마운트가 아님!
                                => 마운트 -> 업데이트/언마운트 가 동시에 실행 됨
                                    => 새로고침 하면 언마운트가 됨가 동시에 업데이트가 되는 개념
                            1. 마운트 : 페이지에 컴포넌트가 나타남
                                { 업데이트 : 리렌더링
                                    => 컴포넌트 정보 업데이트 }
                            2. 언마운트 : 페이지에 컴포넌트가 사라짐
                    
                    - 사용법
                        useEffect(() => {
                            이 영역은 마운트/업데이트시 실행
                            return () => {이 영역은 언마운트시 실행} 
                        })
                        => 대신 return 영역에 업데이트가 1개라도 일어나지 않는다면 실행 X
                    
                - useReducer() : 다양한 컴포넌트 상황에 따라 상태를 다른 값으로 업데이트
                    참고 : src/reducer
                    => 별도의 라이브러리 존재
                    => useState() 만으로 모든 코드를 관리하기 쉽지 않음
                        => 컴포넌트들끼리 서로를 참조하여 업데이틀 하면서 좀 더 간편하게 사용하기 위해서 사용

                - useMemo() : 특정 연산의 불필요한 재실행 방지
                    참고 : begin1/Memo
                    * 의존성 배열
                    - 자식의 Rerendering 막기
                        자식의 export 부분에 React.memo(파일명) 작성
                
                - useCallback() : 함수를 기억하여 불필요한 재실행 방지
                    참고 : begin/Parent
                    * 의존성 배열
                    => 함수를 자식 컴포넌트에 props로 전달할 때,
                       불필요하게 매번 새로 만들어지는 걸 막고 싶을 때 사용

                * 의존성 배열
                    => useEffect, useMemo, useCallback 등...

                    - Rerendering 발생 조건
                        1. useEffect(() => {}, [])
                            => 마운트 시 1번만
                        2. useEffect(() => {})
                            => 매번 렌더링마다 실행
                        3. useEffect(() => {}, [flag])
                            => flag가 바뀔 때만 실행
                        4. useEffect(() => {}, [count])
                            => count가 바뀔 때만 실행
                        => 다른 이유 ? : useEffect 는 의존성 배열 의 값 변화에 따라 동작함!
                            => 따라서 해당 함수의 결과값에 의존성 배열인 [] 의 유무에 따라 동작함
                    
            < 콜백 함수 > : 비동기 일 때 나옴
                참고 : js/callback
                => 나중에 호출되는 함수

                - 예시
                    fetch().then().then().catch();
                        1. fetch 실행 (데이터가 언제 올지는 모름)
                        2. 데이터 도착 이후 .then().then() 실행함
                            => .then 부분이 콜백 함수에 해당 : 언제 도착할지 모르니 .then( 이 영역이 동작 X 일수 있음)

                * 동기식/비동기식
                    동기식 : 액션에 따른 리턴을 기다리는 행위
                        => 코드의 순서에 따라 실행됨
                    비동기식 : 액션만 취하고 리턴이 올 때 행동
                        => 코드의 순서와 상관없이 리턴이 올 때 도중에 행동
                
                - 콜백 지옥
                    fetch().then().then().catch(); 에서 .then 부분에 fetch 로 데이터를 받아옴
                        => 받아온 데이터를 가지고 또 fetch 요청
                        => 또 받아온 데이터를 가지고 fetch 요청....
                            => 무한히 요청을 하는 것을 콜백 지옥이라고 함
                    
                    - 해결법
                        1) promise
                            참고 : js/promise.js

                            - 구조
                                new Promise((resolve, reject) => {
                                resolve();
                                reject(new Error("에러발생"));
                                });
                                    * resolve / reject => 둘 다 함수
                            
                            - 상태
                                1. 대기 (Pending)
                                    => 호출 할 때 => new Promise();
                                2. 이행 (Fulfilled)
                                    => 도착 이후 (비동기 처리가 완료되어 프로미스가 값을 반환해준 상태)
                                3. 실패 (Rejected)
                                    => 실패 (비동기 처리 실패)

                        2) async / await
                            참고 : js/async.js
                            => 동기식은 아니지만 동기식처럼 코드를 짜서 훨씬 직관적이고 깔끔하게 작성 가능
                            => 사실은 내부적으로는 Promise 로 돌아가는 개념
                                => 코드를 더욱 단순화 한 것

                            * await : async 함수 안에서 사용
                                => 비동기로 돌아가는 코드들을 사용할 때 붙여서 작성
                                => 해당 함수가 완료될 때까지 코드 실행 일시 중지

                            - 구조
                                async (params) => {
                                    await 비동기메서드명()
                                }
                            
                            - 작성 예제

                                방법 1)
                                    const res = await fetch("https://jsonplaceholder.typicode.com/todos/1");
                                        => 요청
                                    const data = await res.json();
                                        => .then 부분
                                
                                방법 2)
                                    async function fetchTodo() {
                                    return fetch("https://jsonplaceholder.typicode.com/todos/1").then((res) => res.json());
                                    }
                                    const todo = await fetchTodo();

            < 포트 >
                참고 : begin1/hooks/useFetch, springsource/book/BookRestController

                - 에러
                    1) CORS policy: No 'Access-Control-Allow-Origin'
                        => 동일한 출처(포트)가 아니어서 막힘
                            => 클라이언트의 포트 와 서버의 포트 가 다름

                            - 해결 : 해당 서버의 요청을 받아들인다가 필요함
                                방법 1. 어노테이션
                                    @CrossOrigin(origins = "요청하는 주소")
                                    => 가장 간단함
                                        but. 컨트롤러 모든 매핑들 위에 일일히 어노테이션을 달아야 함
                                방법 2.

    < 서버로 요청 보내기 >
        참고 : todoapp/common/todoApi.js

        - ajax
            1) fetch() : 브라우저 함수 (바로 사용 가능)
                => 기본적인(전통적인) 방식
                => 콜백 지옥에 빠질 경우가 있음
                => .then 2개 필수

                - 방법
                    fetch("경로", {method: "post", body: {}, headers: {} })
                    .then(도착한 데이터 확인, 도착한 데이터를 적절한 타입으로 변환)
                    .then(화면에 나타내기)

                - 실전
                    fetch("경로", {
                    method: "post",
                    body: {},
                    headers: {
                        "Content-Tpye": "application/json",
                    },
                    })
                    .then((res) => {
                        if (!res.ok) throw new Error("에러");
                        return res.json;
                    })
                    .then((data) => {
                        1. 화면에 보여주기
                    });
            
            1-2) async / await
                참고 : 395번째 줄

                - 방법
                    1) 선언만 한 경우
                        const res = await fetch("경로")
                        const data = await res.json()

                    2) 함수 안에 만드는 경우 (동기식 형태처럼 비동기 함수 이용하기)
                        const fetchData = async () => {
                        const res = await fetch("경로");
                        const data = await res.json();
                        };

            2) jQuery 이용 : jQuery 라이브러리 필요 (설치 필요)

            3) axios 이용 : axios 라이브러리 필요 (설치 필요)

                - 방법
                    1) 선언만 한 경우
                        axios.get("경로").then((res) => res.data);
                        * get / post / put / delete
                    
                    2) 함수 안에 만드는 경우 (동기식 형태처럼 비동기 함수 이용하기)
                        const getList = async () => {
                        const res = await axios.get();
                        return res.data;
                        };

    < router >
        참고 : router
        => 하나의 페이지로 서로다른 뷰(화면)을 보여줘야 할 때 사용
        => 페이지 이동할 때마다 렌더링 시키기 => Link 사용

        * URLSearchParams() : 브라우저 API -> 리액트 X
            => 현재 경로를 찾을 때 사용
            ex) const location = useLocation();
                const queryParams = new URLSearchParams(location.search);
                const keyword = queryParams.get("keyword");
                    => keyword 의 값을 가져올 수 있음
        
        * <Outlet />
            => 부모/자식 들의 요소를 중첩해서 띄워줌

        1) main.jsx
            App 을 <BrowserRouter> 로 감싸기
        
        2) jsx 단
           <Routes>
             <Route path="/" element={<Home />} />
           </Routes>

        - use~~ (hook)
            
            1) useNavigate()
                => button 에 주로 사용
                
                - 방법
                    1. 객체 선언 : const navigate = useNavigate();
                    2. 함수 생성 : const navTo = (path) => navigate(path);
                    3. button 요소에 onClick={() => navTo("/")} 삽입
            
            2) useParams()
                참고 : Pages.jsx
                => 주소줄 정보 가져오기

                ex) http://localhost:5173/user/1 => 1 가져오기
                const { id } = useParams();
                    => id 값에 1이 담김
            
            3) useSearchParams()
                참고 : Pages.jsx
                => 주소줄 정보(keyword) 가져오기

                ex) http://localhost:5173/search?keyword=test => keyword 가져오기
                const [queryParams] = useSearchParams();
                const keyword = queryParams.get("keyword");
                    => keyword 에 value 값 담김
                    => get("가져올 key값 입력") -> 해당하는 value 값 나옴

            4) useLocation()
                참고 : Pages.jsx
                => 현재 경로(변경 경로)를 가져올 수 있음
                    => location 객체 선언 후 .pathname 통해 5173 이후 경로 알아올 수 있음

                    앞경로 그대로 뒷경로 바뀌는거 처리 방법

        - 중첩 라우트
            참고 : pages.jsx -> Article 함수들 확인

        - 에러 페이지 만들기
        <Route path="*" element={<Error />} />
            => Error 함수를 별도로 생성하면 명시된 경로 외에는 해당 Error 컴포넌트가 나옴

    < Context API >
        참고 : contexts/CountContext.jsx
        => 저장소
        =>  React 컴포넌트 트리 안에서 전역적(global)이라고 볼 수 있는 데이터를 공유할 수 있도록 고안된 방법
            => 가장 부모가 되는 app 에서 변경됬을때 바꿔야 할 값들이 너무 많은 경우 이용
            => why? 유지보수 측면에서의 어려움이 있음

        => 지금까지는 부모 -> 자식으로 보내는 props 를 일일히 작성하여 코드를 생성했음

        * export default : 무조건 하나만 내보낸다는 뜻
            => default 를 생략해야 여러개를 내보낼 수 있음
            => import 시, {} 없이 인포트 하지만 여러개를 내보낸 경우 {} 통해서 export 하고 import 함

        1. createContext() 생성